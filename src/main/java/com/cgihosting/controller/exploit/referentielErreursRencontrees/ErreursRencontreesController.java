package com.cgihosting.controller.exploit.referentielErreursRencontrees;

import com.cgihosting.constantes.ConstantesAdmin;
import com.cgihosting.constantes.ConstantesPage;
import com.cgihosting.domain.application.JournalDTO;
import com.cgihosting.domain.application.UtilisateurDTO;
import com.cgihosting.domain.referentiel.ReferentielErreursRencontreesDTO;
import com.cgihosting.formulaire.exploit.refrentielErreursRencontrees.AfficherReferentielErreursRencontreesFormulaire;
import com.cgihosting.formulaire.exploit.refrentielErreursRencontrees.DetailsReferentielErreursRencontreesFormulaire;
import com.cgihosting.objets.PaginationObjet;
import com.cgihosting.objets.UtilisateurSession;
import com.cgihosting.outils.Dates;
import com.cgihosting.service.admin.GererUtilisateurService;
import com.cgihosting.service.admin.JournaliserService;
import com.cgihosting.service.exploit.GererErreursRencontreesService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;

/**
 * Created by marinib on 12/01/2017.
 */
@Controller
public class ErreursRencontreesController {


    /**
     * Méthodes controller
     * Le tag @controller permet à spring boot d'interpréter les
     * méthodes comme des controleurs
     */



    @Autowired
    private GererErreursRencontreesService gererErreursRencontreesService;

    @Autowired
    private JournaliserService journaliserService;



    @Autowired
    private GererUtilisateurService gererUtilisateurService;


    @RequestMapping("/exploit/afficherReferentielErreursRencontrees")
    String afficherErreursRencontrees(@RequestParam(value = "page", required = false, defaultValue = "0") int page,
                              @RequestParam(value = "ligneParPage", required = false, defaultValue = "5") int ligneParPage,Model model){

        model.addAttribute("formulaire", recupererFormulaireAfficherErreursRencontrees(page, ligneParPage));
        return "exploit/referentielErreursRencontrees/afficherReferentielErreursRencontrees";
    }

    @RequestMapping(value = "/exploit/afficherDetailsReferentielErreursRencontrees", method = RequestMethod.POST)
    String affichageDetailsErreursRencontrees(int identifiantErreursRencontreesSelect, Model model){

        model.addAttribute(ConstantesPage.NOM_FORMULAIRE_HTML, recupererFormulaireDetailsErreursRencontrees(identifiantErreursRencontreesSelect));
        return "exploit/referentielErreursRencontrees/detailsReferentielErreursRencontrees";
    }


    @RequestMapping(value = "/exploit/modifierReferentielErreursRencontrees", method = RequestMethod.POST)

    String creerErreursrencontrees(@Valid DetailsReferentielErreursRencontreesFormulaire detailsReferentielErreursRencontreesFormulaire, Model model, BindingResult bindingResult, @RequestParam String action){

        int identifiantDonneeTraitee = 0;

        UtilisateurDTO utilisateurDTO;
        ReferentielErreursRencontreesDTO referentielErreursRencontreesDTO;

        if (action.equals(ConstantesPage.ACTION_SAUVEGARDER)) {

            if (bindingResult.hasErrors()) {


                return "exploit/referentielErreursRencontrees/detailsReferentielErreursRencontrees";
            }
            else{

                utilisateurDTO = gererUtilisateurService.searchUserByLogonName(UtilisateurSession.getLogin());
                referentielErreursRencontreesDTO = detailsReferentielErreursRencontreesFormulaire.getReferentielErreursRencontreesDTO();
                referentielErreursRencontreesDTO.setIdModificateur(utilisateurDTO.getId());
                referentielErreursRencontreesDTO.setIdCreateur(utilisateurDTO.getId());
                referentielErreursRencontreesDTO.setDateCreation(Dates.aujourdhui());
                referentielErreursRencontreesDTO.setDateModification(Dates.aujourdhui());

                identifiantDonneeTraitee =  gererErreursRencontreesService.modifierReferentielErreursRencontrees(referentielErreursRencontreesDTO);

                JournalDTO journalDTO = new JournalDTO(UtilisateurSession.getLogin(), ConstantesAdmin.JOURNAL_MODIFICATION_VIRTUALISATION,
                                                        identifiantDonneeTraitee, Dates.aujourdhui());
                journaliserService.enregistrerJournalisation(journalDTO);



                return  "redirect:/exploit/afficherReferentielErreursRencontrees";

            }

        }

        else {

            return  "redirect:/exploit/afficherReferentielErreursRencontrees";

        }


    }



    /**
     * Méthodes privées appelées par les controleurs pour
     * remplir les forumalires associés aux pages web
     * méthodes comme des controleurs
     */

    private AfficherReferentielErreursRencontreesFormulaire recupererFormulaireAfficherErreursRencontrees(int pageCourante, int numLigneAfficheParPage)  {


        AfficherReferentielErreursRencontreesFormulaire afficherReferentielErreursRencontreesFormulaire = new AfficherReferentielErreursRencontreesFormulaire();

        PaginationObjet paginationObjet;
        paginationObjet = new PaginationObjet(numLigneAfficheParPage, pageCourante, gererErreursRencontreesService.nombreTotalErreursRencontrees());
        afficherReferentielErreursRencontreesFormulaire.setPaginationObjet(paginationObjet);

        afficherReferentielErreursRencontreesFormulaire.setReferentielErreursRencontreesDTOPage(gererErreursRencontreesService.searchAllReferentielErreursRencontreesDTOPageByPage(pageCourante, numLigneAfficheParPage));


        afficherReferentielErreursRencontreesFormulaire.setTitrePage(ConstantesPage.ADMIN_AFFICHAGE_VIRTUALISATION_TITRE);
        afficherReferentielErreursRencontreesFormulaire.setBoutonSoumissionLabel(ConstantesPage.ADMIN_BOUTON_AJOUTER_VIRTUALISATION);



        return afficherReferentielErreursRencontreesFormulaire;
    }



    /**
     * Méthodes privées appelées par les controleurs pour
     * remplir les forumalires associés aux pages web
     * méthodes comme des controleurs
     */

    private DetailsReferentielErreursRencontreesFormulaire recupererFormulaireDetailsErreursRencontrees(int identifiantErreursRencontreesSelect) {


        /** Attributs**/
        DetailsReferentielErreursRencontreesFormulaire detailsReferentielErreursRencontreesFormulaire = new DetailsReferentielErreursRencontreesFormulaire();
        ReferentielErreursRencontreesDTO referentielErreursRencontreesDTO = new ReferentielErreursRencontreesDTO();

        if (identifiantErreursRencontreesSelect != 0) {
            referentielErreursRencontreesDTO = gererErreursRencontreesService.recupererReferentielErreursRencontreesById(identifiantErreursRencontreesSelect);

            detailsReferentielErreursRencontreesFormulaire.setBoutonSoumissionLabel(ConstantesPage.ADMIN_BOUTON_MODIFIER_OS);
        }
        else {

            referentielErreursRencontreesDTO.setId(0);
            detailsReferentielErreursRencontreesFormulaire.setBoutonSoumissionLabel(ConstantesPage.ADMIN_BOUTON_AJOUTER_VIRTUALISATION);
        }



        detailsReferentielErreursRencontreesFormulaire.setTitrePage(ConstantesPage.ADMIN_DETAIL_VIRTUALISATION_TITRE);
        detailsReferentielErreursRencontreesFormulaire.setBoutonRetourLabel(ConstantesPage.ADMIN_BOUTON_RETOUR_LISTE_VIRTUALISATION);

        detailsReferentielErreursRencontreesFormulaire.setReferentielErreursRencontreesDTO(referentielErreursRencontreesDTO);


        return detailsReferentielErreursRencontreesFormulaire;
    }


}
