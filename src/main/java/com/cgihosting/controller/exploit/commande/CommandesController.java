package com.cgihosting.controller.exploit.commande;

import com.cgihosting.constantes.ConstantesAdmin;
import com.cgihosting.constantes.ConstantesPage;
import com.cgihosting.domain.application.JournalDTO;
import com.cgihosting.formulaire.exploit.commande.AfficherCommandeFormulaire;
import com.cgihosting.formulaire.exploit.commande.DetailsCommandeFormulaire;
import com.cgihosting.formulaire.monCGIHosting.mesCommandes.DetailsMesCommandeFormulaire;
import com.cgihosting.objets.PaginationObjet;
import com.cgihosting.objets.UtilisateurSession;
import com.cgihosting.outils.Dates;
import com.cgihosting.service.admin.JournaliserService;
import com.cgihosting.service.exploit.GererCommandeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;

/**
 * Created by marinib on 10/02/2017
 */
@Controller
public class CommandesController {


    /**
     * Méthodes controller
     * Le tag @controller permet à spring boot d'interpréter les
     * méthodes comme des controleurs
     */



    @Autowired
    private GererCommandeService gererCommandeService;

    @Autowired
    private JournaliserService journaliserService;


    @RequestMapping(ConstantesPage.AFFICHAGE_LISTE_COMMANDES_ACTION_ENTREE)
    String afficherCommandes(@RequestParam(value = "page", required = false, defaultValue = "0") int page,
                              @RequestParam(value = "ligneParPage", required = false, defaultValue = "5") int ligneParPage,Model model){

        model.addAttribute(ConstantesPage.NOM_FORMULAIRE_HTML, recupererFormulaireAfficherCommandes(page, ligneParPage));
        return ConstantesPage.AFFICHAGE_LISTE_COMMANDES_PAGE_HTML;
    }

    @RequestMapping(value = ConstantesPage.DETAILS_COMMANDES_ACTION_ENTREE, method = RequestMethod.POST)
    String affichageDetailsCommande(int identifiantCommandeSelect, Model model){

        model.addAttribute(ConstantesPage.NOM_FORMULAIRE_HTML, recupererFormulaireDetailsCommande(identifiantCommandeSelect));
        return ConstantesPage.DETAILS_COMMANDES_PAGE_HTML;
    }


    @RequestMapping(value = ConstantesPage.DETAILS_COMMANDES_ACTION_MODIFIER, method = RequestMethod.POST)

    String enregistrerCommandel(@Valid @ModelAttribute(ConstantesPage.NOM_FORMULAIRE_HTML)DetailsMesCommandeFormulaire detailsMesCommandeFormulaire, BindingResult bindingResult, Model model, @RequestParam String action){

        int identifiantDonneeTraitee = 0;

        if (action.equals(ConstantesPage.ACTION_SAUVEGARDER)) {

            if (bindingResult.hasErrors()) {

                detailsMesCommandeFormulaire.setTitrePage(ConstantesPage.DETAILS_COMMANDES_TITRE);
                detailsMesCommandeFormulaire.setBoutonSoumissionLabel(ConstantesPage.DETAILS_COMMANDES_BOUTON_MODIFIER);
                detailsMesCommandeFormulaire.setBoutonRetourLabel(ConstantesPage.DETAILS_COMMANDES_BOUTON_RETOUR);

                model.addAttribute(ConstantesPage.NOM_FORMULAIRE_HTML, detailsMesCommandeFormulaire);

                return ConstantesPage.DETAILS_SERVEURS_VIRTUELS_PAGE_HTML;
            }
            else{


                JournalDTO journalDTO = new JournalDTO(UtilisateurSession.getLogin(), ConstantesAdmin.JOURNAL_INTERVENTION_EXPLOITATION,
                                    35,  Dates.aujourdhui());
                journaliserService.enregistrerJournalisation(journalDTO);



                return  "redirect:" + ConstantesPage.AFFICHAGE_LISTE_COMMANDES_ACTION_ENTREE;

            }

        }

        else {

            return  "redirect:" + ConstantesPage.AFFICHAGE_LISTE_COMMANDES_ACTION_ENTREE;

        }


    }



    /**
     * Méthodes privées appelées par les controleurs pour
     * remplir les forumalires associés aux pages web
     * méthodes comme des controleurs
     */

    private AfficherCommandeFormulaire recupererFormulaireAfficherCommandes(int pageCourante, int numLigneAfficheParPage) {


        AfficherCommandeFormulaire afficherCommandeFormulaire = new AfficherCommandeFormulaire();

        PaginationObjet paginationObjet;
        paginationObjet = new PaginationObjet(numLigneAfficheParPage, pageCourante, gererCommandeService.nombreTotalCommandes());
        afficherCommandeFormulaire.setPaginationObjet(paginationObjet);

        afficherCommandeFormulaire.setTitrePage(ConstantesPage.AFFICHAGE_LISTE_COMMANDES_TITRE);

        afficherCommandeFormulaire.setCommandeDTOPage(gererCommandeService.searchAllCommandeDTOPageByPage(pageCourante, numLigneAfficheParPage));

        afficherCommandeFormulaire.setUrlActionEntree(ConstantesPage.AFFICHAGE_LISTE_COMMANDES_ACTION_ENTREE);
        afficherCommandeFormulaire.setUrlActionSortie(ConstantesPage.DETAILS_COMMANDES_ACTION_ENTREE);



        return afficherCommandeFormulaire;
    }



    /**
     * Méthodes privées appelées par les controleurs pour
     * remplir les forumalires associés aux pages web
     * méthodes comme des controleurs
     */

    private DetailsCommandeFormulaire recupererFormulaireDetailsCommande(int identifiantCommandeSelect) {


        DetailsCommandeFormulaire detailsCommandeFormulaire = new DetailsCommandeFormulaire();



        detailsCommandeFormulaire.setCommandeDTO(gererCommandeService.recupererCommandeById(identifiantCommandeSelect));
        detailsCommandeFormulaire.setTitrePage(ConstantesPage.DETAILS_COMMANDES_TITRE);
        detailsCommandeFormulaire.setBoutonSoumissionLabel(ConstantesPage.DETAILS_COMMANDES_BOUTON_MODIFIER);
        detailsCommandeFormulaire.setBoutonRetourLabel(ConstantesPage.DETAILS_COMMANDES_BOUTON_RETOUR);

        detailsCommandeFormulaire.setUrlActionSortie(ConstantesPage.DETAILS_COMMANDES_ACTION_MODIFIER);


        return detailsCommandeFormulaire;
    }


}
