package com.cgihosting.service.exploit;

import com.cgihosting.domain.application.CommandeDTO;
import com.cgihosting.repository.CommandeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * Created by marinib on 09/12/2016.
 */
@Service
public class GererCommandeServiceImpl implements GererCommandeService {

    /**
     * La balise autowired est indispensable
     */
    @Autowired
    private CommandeRepository commandeRepository;

    @Override
    public List<CommandeDTO> recupererCommandes() {

        List<CommandeDTO> commandeDTOListe = null;

        commandeDTOListe = (List<CommandeDTO>) commandeRepository.findAll();

        return commandeDTOListe;

    }


    @Override
    public CommandeDTO recupererCommandeById(int identifiant) {

        CommandeDTO commandeDTO = commandeRepository.findById(identifiant);

        return commandeDTO;
    }

    @Override
    public int modifierCommande(CommandeDTO commandeDTO) {

        commandeRepository.save(commandeDTO);

        return commandeDTO.getId();
    }

    @Override
    public Long nombreTotalCommandes() {
        Long total;

        total = commandeRepository.count();
        return total;
    }

    @Override
    public Page<CommandeDTO> searchAllCommandeDTOPageByPage(Integer page, Integer ligneParPage) {

        Page<CommandeDTO> commandeDTOPage;


        commandeDTOPage = commandeRepository.findAll(new PageRequest(page,ligneParPage, new Sort(
                new Sort.Order(Sort.Direction.ASC, "id")
        )));
        return commandeDTOPage;
    }

    @Override
    public int creerCommande(CommandeDTO commandeDTO) {


        commandeRepository.save(commandeDTO);

        return commandeDTO.getId();

    }

    @Override
    public Long nombreTotalCommandesByUtilisateur() {
        Long total;

        total = commandeRepository.count();
        return total;
    }

    @Override
    public Page<CommandeDTO> searchAllCommandeslDTOPageByPageByUser(Integer page, Integer ligneParPage, Integer userId) {
        Page<CommandeDTO> commandeDTOPage = null;
/*
        Specification<ServeurVirtuelDTO> rechercheCriteres = titleOrDescriptionContainsIgnoreCase(searchTerm);
        Page<ServeurVirtuelDTO> searchResultPage = serveurVirtuelRepository.findAll(searchSpec, pageRequest);
        return TodoMapper.mapEntityPageIntoDTOPage(pageRequest, searchResultPage);
        */

        return commandeDTOPage;

    }





}
